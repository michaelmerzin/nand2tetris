///////  write function SimpleFunction.test 2
(SimpleFunction.test)
///////  write set_local_segment for 2
@SP
D=M;
@LCL
M=D;
@address_value
M=0;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@address_value
M=0;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
// push local 0
@LCL
A=M;
D=A;
@0
D=D+A;
@address
M=D;
@address
A=M;
D=M;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
// push local 1
@LCL
A=M;
D=A;
@1
D=D+A;
@address
M=D;
@address
A=M;
D=M;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
// add ///////////////////////
@SP
M=M-1;
@SP
A=M;
D=M;
@y
M=D;
@SP
M=M-1;
@SP
A=M;
D=M;
@x
M=D;
@x
D=M;
@y
D=D+M;
@SP
A=M;
M=D;
@SP
M=M+1;
// not ///////////////////////
@SP
M=M-1;
@SP
A=M;
D=M;
@x
M=D;
@x
D=M;
D=!D;
@SP
A=M;
M=D;
@SP
M=M+1;
// push argument 0
@ARG
A=M;
D=A;
@0
D=D+A;
@address
M=D;
@address
A=M;
D=M;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
// add ///////////////////////
@SP
M=M-1;
@SP
A=M;
D=M;
@y
M=D;
@SP
M=M-1;
@SP
A=M;
D=M;
@x
M=D;
@x
D=M;
@y
D=D+M;
@SP
A=M;
M=D;
@SP
M=M+1;
// push argument 1
@ARG
A=M;
D=A;
@1
D=D+A;
@address
M=D;
@address
A=M;
D=M;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
// sub ///////////////////////
@SP
M=M-1;
@SP
A=M;
D=M;
@y
M=D;
@SP
M=M-1;
@SP
A=M;
D=M;
@x
M=D;
@x
D=M;
@y
D=D-M;
@SP
A=M;
M=D;
@SP
M=M+1;
///////  write return
///////  write frame = LCL
@LCL
D=M;
@frame
M=D;
///////  write return_address = *(frame-5)
@frame
D=M;
@5
D=D-A;
A=D;
D=M;
@retAddress
M=D;
///////  write *ARG = pop()
@SP
M=M-1;
@SP
A=M;
D=M;
@x
M=D;
@x
D=M;
@ARG
A=M;
M=D;
///////  write SP = ARG + 1
@ARG
D=M;
@SP
M=D;
@SP
M=M+1;
///////  write restore frame
///////  write restore that
@frame
D=M;
@1
D=D-A;
A=D;
D=M;
@THAT
M=D;
///////  write restore this
@frame
D=M;
@2
D=D-A;
A=D;
D=M;
@THIS
M=D;
///////  write restore arg
@frame
D=M;
@3
D=D-A;
A=D;
D=M;
@ARG
M=D;
///////  write restore lcl
@frame
D=M;
@4
D=D-A;
A=D;
D=M;
@LCL
M=D;
@retAddress
A=M;
0;JMP
