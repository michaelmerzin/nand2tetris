///////  write bootstrap_code
@256
D=A;
@SP
M=D;
///////  write call Sys.init 0
///////  write save_caller_frame
@.bootstrap$ret.0
D=A;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@LCL
D=M
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@ARG
D=M
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@THIS
D=M
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@THAT
D=M
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
///////  write set_arg for 0
@SP
A=M;
D=A;
@5
D=D-A;
@address
M=D;
@address
D=M;
@ARG
M=D;
@SP
D=M;
@LCL
M=D;
@Sys.init
0;JMP
(.bootstrap$ret.0)
///////  write function Class1.set 0
(Class1.set)
///////  write set_local_segment for 0
@SP
D=M;
@LCL
M=D;
// push argument 0
@ARG
A=M;
D=A;
@0
D=D+A;
@address
M=D;
@address
A=M;
D=M;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
// pop static 0
@SP
M=M-1;
@SP
A=M;
D=M;
@sp_value
M=D;
@sp_value
D=M;
@Class1.0
M=D;
// push argument 1
@ARG
A=M;
D=A;
@1
D=D+A;
@address
M=D;
@address
A=M;
D=M;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
// pop static 1
@SP
M=M-1;
@SP
A=M;
D=M;
@sp_value
M=D;
@sp_value
D=M;
@Class1.1
M=D;
// push constant 0
@0
D=A;
@SP
A=M;
M=D;
@SP
M=M+1;
///////  write return
///////  write frame = LCL
@LCL
D=M;
@frame
M=D;
///////  write return_address = *(frame-5)
@frame
D=M;
@5
D=D-A;
A=D;
D=M;
@retAddress
M=D;
///////  write *ARG = pop()
@SP
M=M-1;
@SP
A=M;
D=M;
@x
M=D;
@x
D=M;
@ARG
A=M;
M=D;
///////  write SP = ARG + 1
@ARG
D=M;
@SP
M=D;
@SP
M=M+1;
///////  write restore frame
///////  write restore that
@frame
D=M;
@1
D=D-A;
A=D;
D=M;
@THAT
M=D;
///////  write restore this
@frame
D=M;
@2
D=D-A;
A=D;
D=M;
@THIS
M=D;
///////  write restore arg
@frame
D=M;
@3
D=D-A;
A=D;
D=M;
@ARG
M=D;
///////  write restore lcl
@frame
D=M;
@4
D=D-A;
A=D;
D=M;
@LCL
M=D;
@retAddress
A=M;
0;JMP
///////  write function Class1.get 0
(Class1.get)
///////  write set_local_segment for 0
@SP
D=M;
@LCL
M=D;
// push static 0
@Class1.0
D=M;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
// push static 1
@Class1.1
D=M;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
// sub ///////////////////////
@SP
M=M-1;
@SP
A=M;
D=M;
@y
M=D;
@SP
M=M-1;
@SP
A=M;
D=M;
@x
M=D;
@x
D=M;
@y
D=D-M;
@SP
A=M;
M=D;
@SP
M=M+1;
///////  write return
///////  write frame = LCL
@LCL
D=M;
@frame
M=D;
///////  write return_address = *(frame-5)
@frame
D=M;
@5
D=D-A;
A=D;
D=M;
@retAddress
M=D;
///////  write *ARG = pop()
@SP
M=M-1;
@SP
A=M;
D=M;
@x
M=D;
@x
D=M;
@ARG
A=M;
M=D;
///////  write SP = ARG + 1
@ARG
D=M;
@SP
M=D;
@SP
M=M+1;
///////  write restore frame
///////  write restore that
@frame
D=M;
@1
D=D-A;
A=D;
D=M;
@THAT
M=D;
///////  write restore this
@frame
D=M;
@2
D=D-A;
A=D;
D=M;
@THIS
M=D;
///////  write restore arg
@frame
D=M;
@3
D=D-A;
A=D;
D=M;
@ARG
M=D;
///////  write restore lcl
@frame
D=M;
@4
D=D-A;
A=D;
D=M;
@LCL
M=D;
@retAddress
A=M;
0;JMP
///////  write function Class2.set 0
(Class2.set)
///////  write set_local_segment for 0
@SP
D=M;
@LCL
M=D;
// push argument 0
@ARG
A=M;
D=A;
@0
D=D+A;
@address
M=D;
@address
A=M;
D=M;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
// pop static 0
@SP
M=M-1;
@SP
A=M;
D=M;
@sp_value
M=D;
@sp_value
D=M;
@Class2.0
M=D;
// push argument 1
@ARG
A=M;
D=A;
@1
D=D+A;
@address
M=D;
@address
A=M;
D=M;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
// pop static 1
@SP
M=M-1;
@SP
A=M;
D=M;
@sp_value
M=D;
@sp_value
D=M;
@Class2.1
M=D;
// push constant 0
@0
D=A;
@SP
A=M;
M=D;
@SP
M=M+1;
///////  write return
///////  write frame = LCL
@LCL
D=M;
@frame
M=D;
///////  write return_address = *(frame-5)
@frame
D=M;
@5
D=D-A;
A=D;
D=M;
@retAddress
M=D;
///////  write *ARG = pop()
@SP
M=M-1;
@SP
A=M;
D=M;
@x
M=D;
@x
D=M;
@ARG
A=M;
M=D;
///////  write SP = ARG + 1
@ARG
D=M;
@SP
M=D;
@SP
M=M+1;
///////  write restore frame
///////  write restore that
@frame
D=M;
@1
D=D-A;
A=D;
D=M;
@THAT
M=D;
///////  write restore this
@frame
D=M;
@2
D=D-A;
A=D;
D=M;
@THIS
M=D;
///////  write restore arg
@frame
D=M;
@3
D=D-A;
A=D;
D=M;
@ARG
M=D;
///////  write restore lcl
@frame
D=M;
@4
D=D-A;
A=D;
D=M;
@LCL
M=D;
@retAddress
A=M;
0;JMP
///////  write function Class2.get 0
(Class2.get)
///////  write set_local_segment for 0
@SP
D=M;
@LCL
M=D;
// push static 0
@Class2.0
D=M;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
// push static 1
@Class2.1
D=M;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
// sub ///////////////////////
@SP
M=M-1;
@SP
A=M;
D=M;
@y
M=D;
@SP
M=M-1;
@SP
A=M;
D=M;
@x
M=D;
@x
D=M;
@y
D=D-M;
@SP
A=M;
M=D;
@SP
M=M+1;
///////  write return
///////  write frame = LCL
@LCL
D=M;
@frame
M=D;
///////  write return_address = *(frame-5)
@frame
D=M;
@5
D=D-A;
A=D;
D=M;
@retAddress
M=D;
///////  write *ARG = pop()
@SP
M=M-1;
@SP
A=M;
D=M;
@x
M=D;
@x
D=M;
@ARG
A=M;
M=D;
///////  write SP = ARG + 1
@ARG
D=M;
@SP
M=D;
@SP
M=M+1;
///////  write restore frame
///////  write restore that
@frame
D=M;
@1
D=D-A;
A=D;
D=M;
@THAT
M=D;
///////  write restore this
@frame
D=M;
@2
D=D-A;
A=D;
D=M;
@THIS
M=D;
///////  write restore arg
@frame
D=M;
@3
D=D-A;
A=D;
D=M;
@ARG
M=D;
///////  write restore lcl
@frame
D=M;
@4
D=D-A;
A=D;
D=M;
@LCL
M=D;
@retAddress
A=M;
0;JMP
///////  write function Sys.init 0
(Sys.init)
///////  write set_local_segment for 0
@SP
D=M;
@LCL
M=D;
// push constant 6
@6
D=A;
@SP
A=M;
M=D;
@SP
M=M+1;
// push constant 8
@8
D=A;
@SP
A=M;
M=D;
@SP
M=M+1;
///////  write call Class1.set 2
///////  write save_caller_frame
@Sys.Sys.init$ret.0
D=A;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@LCL
D=M
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@ARG
D=M
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@THIS
D=M
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@THAT
D=M
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
///////  write set_arg for 2
@SP
A=M;
D=A;
@7
D=D-A;
@address
M=D;
@address
D=M;
@ARG
M=D;
@SP
D=M;
@LCL
M=D;
@Class1.set
0;JMP
(Sys.Sys.init$ret.0)
// pop temp 0
@5
D=A;
@0
D=D+A;
@address
M=D;
@SP
M=M-1;
@SP
A=M;
D=M;
@sp_value
M=D;
@sp_value
D=M;
@address
A=M;
M=D;
// push constant 23
@23
D=A;
@SP
A=M;
M=D;
@SP
M=M+1;
// push constant 15
@15
D=A;
@SP
A=M;
M=D;
@SP
M=M+1;
///////  write call Class2.set 2
///////  write save_caller_frame
@Sys.Sys.init$ret.1
D=A;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@LCL
D=M
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@ARG
D=M
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@THIS
D=M
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@THAT
D=M
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
///////  write set_arg for 2
@SP
A=M;
D=A;
@7
D=D-A;
@address
M=D;
@address
D=M;
@ARG
M=D;
@SP
D=M;
@LCL
M=D;
@Class2.set
0;JMP
(Sys.Sys.init$ret.1)
// pop temp 0
@5
D=A;
@0
D=D+A;
@address
M=D;
@SP
M=M-1;
@SP
A=M;
D=M;
@sp_value
M=D;
@sp_value
D=M;
@address
A=M;
M=D;
///////  write call Class1.get 0
///////  write save_caller_frame
@Sys.Sys.init$ret.2
D=A;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@LCL
D=M
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@ARG
D=M
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@THIS
D=M
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@THAT
D=M
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
///////  write set_arg for 0
@SP
A=M;
D=A;
@5
D=D-A;
@address
M=D;
@address
D=M;
@ARG
M=D;
@SP
D=M;
@LCL
M=D;
@Class1.get
0;JMP
(Sys.Sys.init$ret.2)
///////  write call Class2.get 0
///////  write save_caller_frame
@Sys.Sys.init$ret.3
D=A;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@LCL
D=M
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@ARG
D=M
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@THIS
D=M
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
@THAT
D=M
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
///////  write set_arg for 0
@SP
A=M;
D=A;
@5
D=D-A;
@address
M=D;
@address
D=M;
@ARG
M=D;
@SP
D=M;
@LCL
M=D;
@Class2.get
0;JMP
(Sys.Sys.init$ret.3)
//////// write label  //
(Sys.Sys.init$WHILE)
//////// write goto  //
@Sys.Sys.init$WHILE
0;JMP
