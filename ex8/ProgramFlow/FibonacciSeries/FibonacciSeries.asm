// push argument 1
@ARG
A=M;
D=A;
@1
D=D+A;
@address
M=D;
@address
A=M;
D=M;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
// pop pointer 1
@THAT
D=A;
@address
M=D;
@SP
M=M-1;
@SP
A=M;
D=M;
@sp_value
M=D;
@sp_value
D=M;
@address
A=M;
M=D;
// push constant 0
@0
D=A;
@SP
A=M;
M=D;
@SP
M=M+1;
// pop that 0
@THAT
A=M;
D=A;
@0
D=D+A;
@address
M=D;
@SP
M=M-1;
@SP
A=M;
D=M;
@sp_value
M=D;
@sp_value
D=M;
@address
A=M;
M=D;
// push constant 1
@1
D=A;
@SP
A=M;
M=D;
@SP
M=M+1;
// pop that 1
@THAT
A=M;
D=A;
@1
D=D+A;
@address
M=D;
@SP
M=M-1;
@SP
A=M;
D=M;
@sp_value
M=D;
@sp_value
D=M;
@address
A=M;
M=D;
// push argument 0
@ARG
A=M;
D=A;
@0
D=D+A;
@address
M=D;
@address
A=M;
D=M;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
// push constant 2
@2
D=A;
@SP
A=M;
M=D;
@SP
M=M+1;
// sub ///////////////////////
@SP
M=M-1;
@SP
A=M;
D=M;
@y
M=D;
@SP
M=M-1;
@SP
A=M;
D=M;
@x
M=D;
@x
D=M;
@y
D=D-M;
@SP
A=M;
M=D;
@SP
M=M+1;
// pop argument 0
@ARG
A=M;
D=A;
@0
D=D+A;
@address
M=D;
@SP
M=M-1;
@SP
A=M;
D=M;
@sp_value
M=D;
@sp_value
D=M;
@address
A=M;
M=D;
//////// write label  //
(FibonacciSeries.bootstrap$MAIN_LOOP_START)
// push argument 0
@ARG
A=M;
D=A;
@0
D=D+A;
@address
M=D;
@address
A=M;
D=M;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
//////// write if  //
@SP
M=M-1;
@SP
A=M;
D=M;
@x
M=D;
@x
D=M
@FibonacciSeries.bootstrap$COMPUTE_ELEMENT
D;JNE
//////// write goto  //
@FibonacciSeries.bootstrap$END_PROGRAM
0;JMP
//////// write label  //
(FibonacciSeries.bootstrap$COMPUTE_ELEMENT)
// push that 0
@THAT
A=M;
D=A;
@0
D=D+A;
@address
M=D;
@address
A=M;
D=M;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
// push that 1
@THAT
A=M;
D=A;
@1
D=D+A;
@address
M=D;
@address
A=M;
D=M;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
// add ///////////////////////
@SP
M=M-1;
@SP
A=M;
D=M;
@y
M=D;
@SP
M=M-1;
@SP
A=M;
D=M;
@x
M=D;
@x
D=M;
@y
D=D+M;
@SP
A=M;
M=D;
@SP
M=M+1;
// pop that 2
@THAT
A=M;
D=A;
@2
D=D+A;
@address
M=D;
@SP
M=M-1;
@SP
A=M;
D=M;
@sp_value
M=D;
@sp_value
D=M;
@address
A=M;
M=D;
// push pointer 1
@THAT
D=A;
@address
M=D;
@address
A=M;
D=M;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
// push constant 1
@1
D=A;
@SP
A=M;
M=D;
@SP
M=M+1;
// add ///////////////////////
@SP
M=M-1;
@SP
A=M;
D=M;
@y
M=D;
@SP
M=M-1;
@SP
A=M;
D=M;
@x
M=D;
@x
D=M;
@y
D=D+M;
@SP
A=M;
M=D;
@SP
M=M+1;
// pop pointer 1
@THAT
D=A;
@address
M=D;
@SP
M=M-1;
@SP
A=M;
D=M;
@sp_value
M=D;
@sp_value
D=M;
@address
A=M;
M=D;
// push argument 0
@ARG
A=M;
D=A;
@0
D=D+A;
@address
M=D;
@address
A=M;
D=M;
@address_value
M=D;
@address_value
D=M;
@SP
A=M;
M=D;
@SP
M=M+1;
// push constant 1
@1
D=A;
@SP
A=M;
M=D;
@SP
M=M+1;
// sub ///////////////////////
@SP
M=M-1;
@SP
A=M;
D=M;
@y
M=D;
@SP
M=M-1;
@SP
A=M;
D=M;
@x
M=D;
@x
D=M;
@y
D=D-M;
@SP
A=M;
M=D;
@SP
M=M+1;
// pop argument 0
@ARG
A=M;
D=A;
@0
D=D+A;
@address
M=D;
@SP
M=M-1;
@SP
A=M;
D=M;
@sp_value
M=D;
@sp_value
D=M;
@address
A=M;
M=D;
//////// write goto  //
@FibonacciSeries.bootstrap$MAIN_LOOP_START
0;JMP
//////// write label  //
(FibonacciSeries.bootstrap$END_PROGRAM)
