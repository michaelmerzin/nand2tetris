
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    /** Initializes the class. */
    static array ram;
    static int freeList;
    static array heap;

    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null
        let ram = 0;
        let heap = 2048; // heapBase
        let freeList = 2048; // heapBase
        let heap[0] = 14335; // heapLength
        let heap[1] = 0; // next
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the 
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.
        var int firstFit;
        var int block;

        let firstFit = Memory.firstFit(size);
        if (firstFit = (-1)) { // no such segment is found
            return (-1);
        }

        if (heap[firstFit] = (size + 1)) { // if the segment remainder is too small
            let freeList = heap[firstFit + 1]; // Update freeList to reflect the allocation
            let block = firstFit + 1; // needed part of the found segment
        }
        else {
            let block = firstFit + heap[firstFit] - size + 1; // needed part of the found segment
        }

        let heap[block] = 0; // Initialize the block
        let heap[block - 1] = size + 1; // Remember block size, for de-allocation

        if (~(heap[firstFit] = (size + 1))) { // if the segment is not to small
            let heap[firstFit] = heap[firstFit] - size - 1; // Update freeList to reflect the allocation
        }

        return block + 2048;
    }

    function int firstFit(int size) {
        var int heapAddress;
        let heapAddress = freeList - 2048; // address of the first segment in the freeList

        if ((heap[heapAddress] + 1) > size){ // if freeList is empty
            return heapAddress;
        }     

        while (~((heap[heapAddress + 1]) = -2048)) { // while next != null
            if ((heap[heapAddress] + 1) > size) { // segment.size >= size
                return heapAddress; // return the address of the segment in the heap
            }
            let heapAddress = heap[heapAddress + 1] - 2048; // address of the next segment in the freeList
        }
        return (-1); // no such segment is found 
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeList
        var int next;
        var int segment;
        let next = freeList;
        let segment = o - 1 - 2048;
        let freeList = o - 1;
        let heap[segment + 1] = next;
        return;
    }    

    /** Returns the maximal element contained in the given Array/object. 
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.
        var int max;
        var int i;
        var int size;

        let size = o[-1] - 1;
        let max = o[0];
        let i = 1;
        while (i < size) {
            if (o[i] > max) {
                let max = o[i];
            }
            let i = i + 1;
        }
        return max;
    }
}
