// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
        /** Initializes the library. */
        static Array bits;
        static Array sum;

        function void init() { 
            var int i;
            var int val;
            let sum = Array.new(1);
            let bits = Array.new(16);
            let i = 0;
            let val = 1;
            

            while(i < 16){
                let bits[i] = val;
                let val = ^val; // val = 2 * val
                let i = i + 1;
            }
            return;
        }

        function boolean bit (int x, int i){
            return ~((x & bits[i]) = 0); // (x & bits[i]) != 0
        }

        /** Returns the absolute value of x. */
        function int abs(int x) {
            if(x<0){
                return -x;
            }
            return x;
        }

        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            // Pseudocode:
            // 1. let sum = 0
            // 2. let shiftedx = x
            // 3. for i = 0 ... n-1 do
            // 4.   if ((i-th bit of y) == 1)
            // 5.      let sum = sum + shiftedx
            // 6.   let shiftedx = 2*shiftedx
            // 7. return sum
            var int sum;
            var int shiftedx;
            var int i;

            let sum = 0;
            let shiftedx = x;
            let i = 0;
            
            while (i < 16){ // 16 is the number of bits in an int
                if(Math.bit(y,i)){
                    let sum = sum + shiftedx;
                }
                let shiftedx = ^shiftedx; // shiftedx = 2 * shiftedx
                let i = i + 1;
            }
            return sum;
        }

        /** 
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1
            var int q;
            var int mult;
            var int result;
            var int x2, y2;

            let sum[0] = 0;
            let x2 = Math.abs(x);
            let y2 = Math.abs(y);
            let result = Math.divideHelper(x2, y2, sum);
            if (((x > 0) & (y > 0)) | ((x < 0) & (y < 0))) {
                return result;
            }
            else {
                return -result;
            }
            
        }


        function int divideHelper(int x, int y, Array sum) {
            var int q;
            var int mult;

            if ((y > x) | (y < 0)) {
                return 0;
            }
            let q = Math.divideHelper(x, ^y, sum); // q = divide(x, 2*y)

            if ((x - sum[0]) < y) { // x - 2*q*y < y
                return ^q; // q = 2*q
            }
            else {
                let sum[0] = sum[0] + y;
                return (^q) + 1;  // q = 2*q + 1;
            }
        }

        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            // This should be implemented without using multiplication or division.
            // Pseudocode (where '**' is the mathematical power function):
            // 1. let y = 0
            // 2. for j = (n/2 - 1) ... 0 do
            // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
            // 4. return y
            
            var int y;
            var int j;
            var int i;
            var int squared;
            var int holder;

            let squared = 0;
            let y = 0;
            let j = 7; // 7 is the number of bits in an int / 2 - 1

            while (j > (-1)){ // 0 <= j <= 7
                let holder = squared + bits[j + j] + Math.shiftLeft(y, j+1); // squared = (y + 2**j)**2
                // (y + 2**j)**2 <= x, x = 32767 is the max value of an int, squared > 0 is to avoid overflow
                if (((holder < (x + 1)) | (x = 32767)) & (holder > 0)){ 
                    let squared = holder;
                    let y = y + bits[j]; // y = y + 2**j
                }
                let j = j - 1;
            }
            return y;
        }

        function int shiftLeft(int x, int n) {
            var int i;
            let i = 0;
            while (i < n) {
                let x = ^x;
                let i = i + 1;
            }
            return x;
        }

        /** Returns the greater number. */
        function int max(int a, int b) {
            if(a > b){ 
                return a;
            }
            return b;
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
            if(a < b)
            {
                return a;
            }
            return b;
        }
}
