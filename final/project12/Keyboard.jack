
/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
        /** Initializes the keyboard. */
        function void init() {
            //TODO: implement this function
            return;
        } 

        /**
         * Returns the character of the currently pressed key on the keyboard;
         * if no key is currently pressed, returns 0.
         *
         * Recognizes all ASCII characters, as well as the following keys:
         * new line = 128 = String.newline()
         * backspace = 129 = String.backspace()
         * left arrow = 130
         * up arrow = 131
         * right arrow = 132
         * down arrow = 133
         * home = 134
         * End = 135
         * page up = 136
         * page down = 137
         * insert = 138
         * delete = 139
         * ESC = 140
         * F1 - F12 = 141 - 152
         */
        function char keyPressed() {
            // Uses Memory.peek
            var char c;
            let c = Memory.peek(24576);
            if ((c > 31) & (c < 153)){
                return c;
            }
            return 0;
        }

        /**								
         * Waits until a key is pressed on the keyboard and released,
         * then echoes the key to the screen, and returns the character 
         * of the pressed key.
         */
        function char readChar() {
            // This should behave exactly like the built-in OS.
            // Pseudocode:
            // 1. display the cursor
            // 2. while (keyPressed() = 0): do nothing
            // 3. let c = code of the currently pressed key
            // 4. while (~(keyPressed() = 0)): do nothing
            // 5. display c at the current cursor location
            // 6. advance the cursor
            // 7. return c
            var char c;
            while (Keyboard.keyPressed() = 0) {
                // do nothing
            }
            let c = Keyboard.keyPressed();
            while (~(Keyboard.keyPressed() = 0)) {
                // do nothing
            }
            do Output.printChar(c);
            return c;
            
        }

        /**								
         * Displays the message on the screen, reads from the keyboard the entered
         * text until a newline character is detected, echoes the text to the screen,
         * and returns its value. Also handles user backspaces if the current value
         * is longer than a single character.
         */
        function String readLine(String message) {
            // This should behave exactly like the built-in OS.
            // You can assume input is at most 64 characters long.
            // Why? Because this is the width of our screen!
            // Pseudocode:
            // 1. printString(message)
            // 2. let str = ""
            // 3. while true
            // 4.   let c = readChar()
            // 5.   if (c = newLine)
            // 6.      display newLine (if not displayed already by readChar())
            // 7.      return str
            // 8.   else if (c = backSpace)
            // 9.      remove the last character from str, if possible
            // 10.     move the cursor accordingly
            // 11.  else
            // 12.    str.appendChar(c)

            var String str;
            var char c;

            do Output.printString(message);
            let str = String.new(64);
            while (true) {
                let c = Keyboard.readChar();
                if (c = String.newLine()) {
                    return str;
                } 
                else {
                    if (c = String.backSpace()){
                        if (str.length() > 0) {
                            do str.eraseLastChar();
                        }
                    } 
                    else {
                        do str.appendChar(c);
                    }
                }
            }
            return str;
        }     

        /**								
         * Displays the message on the screen, reads from the keyboard the entered
         * text until a newline character is detected, echoes the text to the screen,
         * and returns its integer value (until the first non-digit character in the
         * entered text is detected). Also handles user backspaces. 
         */
        function int readInt(String message) {
            // This should behave exactly like the built-in OS.    
            var String str;
            var int intMassage; 
            var char c;
            var int condition;
            var int minus;

            do Output.printString(message);
            let str = String.new(64);
            let condition = 1;
            let minus = 0;
            
            while (condition = 1) {
                let c = Keyboard.readChar();
                if (c = String.newLine()) {
                    let intMassage = str.intValue();
                    if (minus = 1) {
                        let intMassage = intMassage * -1;
                    }
                    return intMassage;
                } 
                else {
                    if (c = String.backSpace()){ // if c is a backspace
                        if (str.length() > 0) {
                            do str.eraseLastChar();
                        }
                    } 
                    else {
                        if ((c = 45) & (str.length() = 0)){ // if c is a minus sign
                                let minus = 1;
                            }

                        else { 
                            
                            if ((c < 48) | (c > 57)) { // if c is not a digit
                                let condition = 0;
                            }
                            
                            else { // if c is a digit
                                do str.appendChar(c);
                            }                  
                        }
                    }
                }
            }

            let intMassage = str.intValue();
            if (minus = 1) {
                let intMassage = intMassage * -1;
            }
            do str.dispose();
            return intMassage;
        }
}
