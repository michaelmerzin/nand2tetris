
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    field Array str;
    field int length;
    
    constructor String new(int maxLength) {
        let length = 0;
        if (maxLength = 0) {
            return this;
        }
        let str = Array.new(maxLength); 
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (length > 0){
            do str.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
        
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this; 
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let str[length] = 0;
        let length=length-1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        // Pseudocode:
        // 1. let val = 0
        // 2. for (i = 0 .. str.length()) do
        // 3.   let d = integer value of str.charAt(i)
        // 4.   let val = (val*10) + d
        // 5. return val
        var int val;
        var int d;
        var int i;
        var char minus;
        var int isMinus;
        let val = 0;
        let d = 0;
        let i = 0;
        let minus = 45;
        let isMinus = 0;
        
        if (str[0] = minus) {
            let isMinus = 1;
            let i = 1;
        }

        while (i < length){
            if ((str[i] < 48) & (str[i] > 57)) {
               let i = length; 
            }
            else {
                let d = charToInt(str[i]);
                let val = (val * 10) + d;
                let i = i + 1;
            }
        }

        if (isMinus = 1) {
            let val = val * -1;
        }
        return val;
    }

    method int charToInt(char c) {
        return c - 48;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Pseudocode:
        // 1. let lastDigit = val % 10
        // 2. let c = character representing lastDigit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)


        let length = 0;
        if (val < 0) {
            do appendChar(45); // 45 is the ascii code for '-'
            let val = val * (-1); 
        }

        do int2String(val); 
        return;
    }
    
    method void int2String(int val) {
        var int lastDigit;
        var char c;

        let lastDigit = val - (10 * (val/10)); 
        let c = intToChar(lastDigit); 

        if (val < 10) {
            do appendChar(c); 
        }
        else {
            do int2String(val / 10);
            do appendChar(c);
        }
        return;
    }


    method char intToChar(int i) {
        return i + 48;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
