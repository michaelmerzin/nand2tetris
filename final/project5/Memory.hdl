

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux(in=load, sel=address[14], a=loadRAM, b=loadIO);
    DMux(in=loadIO, sel=address[13], a=loadScreen, b=InvalidOrKBD);

    Or8Way(in=address[0..7], out=half1);
    Or8Way(in=address[5..12], out=half2); 
    Or(a=half1, b=half2, out=IsNotKBD);

    RAM16K(in=in, load=loadRAM, address=address[0..13], out=outR); 
    Screen(in=in, load=loadScreen, address=address[0..12], out=outS); //RAM8K - address[13]
    Keyboard(out=outK); //


    Mux16(a=outK, b=false , sel=IsNotKBD, out=outKbdOrInvalid); // b =invalid
    
    Mux4Way16(a=outR, b=outR, c=outS, d=outKbdOrInvalid, sel=address[13..14], out=out);
}
