

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a=instruction, b=ALUOutput, sel=instruction[15], out=ALUorAinstruct); //instruction[15] = instruction type

    Not(in=instruction[15], out=Ainstruction);
    Or(a=instruction[5], b=Ainstruction, out=loadA); //instruction[5] for c-instruction, instruction[15] for a-instruction
    ARegister(in=ALUorAinstruct, load=loadA, out=outA); 


    And(a=instruction[12], b=instruction[15], out=IsCinstructOnM);
    Mux16(a=outA, b=inM, sel=IsCinstructOnM, out=outAorM);

    
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=ALUOutput, load=loadD, out=outD);

    ALU(x=outD, y=outAorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], 
        ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out = ALUOutput, zr=zero, ng=negtive);


    And(a=instruction[3], b=instruction[15], out=writeM); // if c-instruction -> writeM = instruction[3]
    And16(a=outA, b=outA, out = out1, out[0..14]=addressM); //addressM = outA[0..14]

    // loadPC = f([j3, j2, j1], [NF, ZF, PF]) //
    Not(in=negtive, out=NonNegtive);
    Not(in=zero, out=NonZero);
    And(a=NonNegtive, b=NonZero, out=positive);

    And(a=instruction[0], b=positive, out=JGT); // out > 0
    And(a=instruction[1], b=zero, out=JEQ); // out == 0
    And(a=instruction[2], b=negtive, out=JLT); // out < 0

    Or(a=JGT, b=JEQ, out=JGE); // out >= 0
    Or(a=JGE, b=JLT, out=JMP);
    And(a=JMP, b=instruction[15], out=loadPC);

    PC(in=outA, load=loadPC, inc=true, reset=reset, out=out2, out[0..14]=pc);
}
