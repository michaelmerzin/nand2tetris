

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    // Put your code here:
    Mux16(a=instruction, b=ALUOutput, sel=instruction[15], out=ALUorAinstruct); //instruction[15] = instruction type

    Not(in=instruction[15], out=Ainstruction);
    Or(a=instruction[5], b=Ainstruction, out=loadA); //instruction[5] for c-instruction, instruction[15] for a-instruction
    ARegister(in=ALUorAinstruct, load=loadA, out=outA); 


    And(a=instruction[12], b=instruction[15], out=IsCinstructOnM);
    Mux16(a=outA, b=inM, sel=IsCinstructOnM, out=outAorM);

    
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=ALUOutput, load=loadD, out=outD);

    ExtendAlu(x=outD, y=outAorM, instruction = instruction[6..14], out=outM, out = ALUOutput, zr=zero, ng=negtive);


    And(a=instruction[3], b=instruction[15], out=writeM); // if c-instruction -> writeM = instruction[3]
    And16(a=outA, b=outA, out = out1, out[0..14]=addressM); //addressM = outA[0..14]

    // loadPC = f([j3, j2, j1], [NF, ZF, PF]) //
    Not(in=negtive, out=NonNegtive);
    Not(in=zero, out=NonZero);
    And(a=NonNegtive, b=NonZero, out=positive);

    And(a=instruction[0], b=positive, out=JGT); // out > 0
    And(a=instruction[1], b=zero, out=JEQ); // out == 0
    And(a=instruction[2], b=negtive, out=JLT); // out < 0

    Or(a=JGT, b=JEQ, out=JGE); // out >= 0
    Or(a=JGE, b=JLT, out=JMP);
    And(a=JMP, b=instruction[15], out=loadPC);

    PC(in=outA, load=loadPC, inc=true, reset=reset, out=out2, out[0..14]=pc);
}
