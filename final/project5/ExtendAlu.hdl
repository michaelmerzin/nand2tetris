

// The ExtendAlu chip is an extension of the standard ALU which also supports
// shift operations.
// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1, the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x".
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     // Put your code here:
     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], 
          f=instruction[1], no=instruction[0], out=outRegular, zr=zrRegular, ng=ngRegular); //normal ALU


     Mux16(a=y, b=x, sel=instruction[4], out=num);
     ShiftLeft(in = num, out = ShistLeftNum);
     ShiftRight(in = num, out =  ShiftRightNum);
     Mux16(a=ShiftRightNum, b=ShistLeftNum, sel=instruction[5], out=outShift);
     ALU(x=outShift, y=true, zx=false, nx=false, zy=true, ny=true, 
          f=false, no=false, out=unUsed, zr=zrShift, ng=ngShift);

     Mux16(a=false, b=outRegular, sel=instruction[7], out=out1);
     Mux16(a=outShift, b=out1, sel=instruction[8], out=out);

     Mux(a=false, b=zrRegular, sel=instruction[7], out=zr1);
     Mux(a=zrShift, b=zr1, sel=instruction[8], out=zr);

     Mux(a=false, b=ngRegular, sel=instruction[7], out=ng1);
     Mux(a=ngShift, b=ng1, sel=instruction[8], out=ng);
}
